{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { getStorage, uploadBytes } from 'firebase/storage';\nimport { ref } from 'vue';\nimport { storage } from '../firebase/config';\nimport getUserAuth from './getUserAuth';\n\nvar _getUserAuth = getUserAuth(),\n    userAuth = _getUserAuth.userAuth;\n\nvar useStorage = function useStorage() {\n  // const error = ref(null)\n  // const url = ref(null)\n  // const filePath = ref(null)\n  // const uploadImage = async (file) => {\n  //     //filePath.value = `users/${userAuth.value.uid}/${file.name}`\n  //     const storageRef = ref(storage, `users/${userAuth.value.uid}/${file.name}`)\n  //     try {\n  //         //const res = await storageRef.put(file)\n  //         const res = await uploadBytes(storageRef, file)\n  //         url.value = res.getDownloadURL()\n  //     } catch(err) {\n  //         console.log(err.message)\n  //         error.value = err.message\n  //     }\n  // }\n  var storage = getStorage();\n  var storageRef = ref(storage, \"users/\".concat(userAuth.value.uid, \"/\").concat(file.name));\n  uploadBytes(storageRef, file).then(function (snapshot) {\n    console.log('Uploaded a blob or file!');\n  });\n  return {\n    error: error,\n    url: url,\n    filePath: filePath,\n    uploadImage: uploadImage\n  };\n};\n\nexport default useStorage;","map":{"version":3,"names":["getStorage","uploadBytes","ref","storage","getUserAuth","userAuth","useStorage","storageRef","value","uid","file","name","then","snapshot","console","log","error","url","filePath","uploadImage"],"sources":["D:/Laragon/www/Osem-Salmon-PRS/src/composables/useStorage.js"],"sourcesContent":["import { getStorage, uploadBytes } from 'firebase/storage'\r\nimport { ref } from 'vue'\r\nimport { storage } from '../firebase/config'\r\nimport getUserAuth from './getUserAuth'\r\n\r\nconst { userAuth } = getUserAuth()\r\n\r\nconst useStorage = () => {\r\n    // const error = ref(null)\r\n    // const url = ref(null)\r\n    // const filePath = ref(null)\r\n\r\n    // const uploadImage = async (file) => {\r\n    //     //filePath.value = `users/${userAuth.value.uid}/${file.name}`\r\n    //     const storageRef = ref(storage, `users/${userAuth.value.uid}/${file.name}`)\r\n\r\n    //     try {\r\n    //         //const res = await storageRef.put(file)\r\n    //         const res = await uploadBytes(storageRef, file)\r\n    //         url.value = res.getDownloadURL()\r\n    //     } catch(err) {\r\n    //         console.log(err.message)\r\n    //         error.value = err.message\r\n    //     }\r\n    // }\r\n\r\n    const storage = getStorage()\r\n    const storageRef = ref(storage,`users/${userAuth.value.uid}/${file.name}`)\r\n\r\n    uploadBytes(storageRef, file).then((snapshot) => {\r\n        console.log('Uploaded a blob or file!')\r\n    })\r\n\r\n    return {\r\n        error, url, filePath, uploadImage\r\n    }\r\n}\r\n\r\nexport default useStorage"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,SAASC,GAAT,QAAoB,KAApB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,mBAAqBA,WAAW,EAAhC;AAAA,IAAQC,QAAR,gBAAQA,QAAR;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;EACrB;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,IAAMH,OAAO,GAAGH,UAAU,EAA1B;EACA,IAAMO,UAAU,GAAGL,GAAG,CAACC,OAAD,kBAAkBE,QAAQ,CAACG,KAAT,CAAeC,GAAjC,cAAwCC,IAAI,CAACC,IAA7C,EAAtB;EAEAV,WAAW,CAACM,UAAD,EAAaG,IAAb,CAAX,CAA8BE,IAA9B,CAAmC,UAACC,QAAD,EAAc;IAC7CC,OAAO,CAACC,GAAR,CAAY,0BAAZ;EACH,CAFD;EAIA,OAAO;IACHC,KAAK,EAALA,KADG;IACIC,GAAG,EAAHA,GADJ;IACSC,QAAQ,EAARA,QADT;IACmBC,WAAW,EAAXA;EADnB,CAAP;AAGH,CA7BD;;AA+BA,eAAeb,UAAf"},"metadata":{},"sourceType":"module"}