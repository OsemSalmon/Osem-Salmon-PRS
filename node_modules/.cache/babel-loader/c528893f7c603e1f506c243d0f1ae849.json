{"ast":null,"code":"import _asyncToGenerator from \"D:/Laragon/www/Osem-Salmon-PRS/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { ref } from \"vue\";\nimport useStorage from \"@/composables/useStorage\";\nimport { uploadBytesResumable } from \"@firebase/storage\";\nexport default {\n  setup: function setup() {\n    var _useStorage = useStorage(),\n        filePath = _useStorage.filePath,\n        url = _useStorage.url,\n        uploadImage = _useStorage.uploadImage;\n\n    var file = ref(null);\n    var fileError = ref(null);\n    var types = [\"image/png\", \"image/jpeg\", \"image/jpg\"]; //submit image\n\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var storageRef, uploadTask;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (file.value) {\n                  //console.log(\"submitted \" + file.value)\n                  //uploadImage(file.value)\n                  //console.log('image uploaded url:' + url.value)\n                  storageRef = ref(useStorage, \"images\");\n                  uploadTask = uploadBytesResumable(storageRef, file);\n                  uploadTask.on(\"state_changed\", function (snapshot) {\n                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                    var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                    console.log(\"Upload is \" + progress + \"% done\");\n\n                    switch (snapshot.state) {\n                      case \"paused\":\n                        console.log(\"Upload is paused\");\n                        break;\n\n                      case \"running\":\n                        console.log(\"Upload is running\");\n                        break;\n                    }\n                  }, function (error) {\n                    // A full list of error codes is available at\n                    // https://firebase.google.com/docs/storage/web/handle-errors\n                    switch (error.code) {\n                      case \"storage/unauthorized\":\n                        // User doesn't have permission to access the object\n                        break;\n\n                      case \"storage/canceled\":\n                        // User canceled the upload\n                        break;\n                      // ...\n\n                      case \"storage/unknown\":\n                        // Unknown error occurred, inspect error.serverResponse\n                        break;\n                    }\n                  }, function () {\n                    // Upload completed successfully, now we can get the download URL\n                    getDownloadURL(uploadTask.snapshot.ref).then(function (downloadURL) {\n                      console.log(\"File available at\", downloadURL);\n                    });\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function handleSubmit() {\n        return _ref.apply(this, arguments);\n      };\n    }(); //handle image name\n\n\n    var handleChange = function handleChange(e) {\n      var selected = e.target.files[0];\n      console.log(selected);\n\n      if (selected && types.includes(selected.type)) {\n        file.value = selected;\n        fileError.value = null;\n      } else {\n        file.value = null;\n        fileError.value = \"Please select an image file (png or jpg)\";\n      }\n    };\n\n    return {\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      fileError: fileError\n    };\n  }\n};","map":{"version":3,"sources":["D:\\Laragon\\www\\Osem-Salmon-PRS\\src\\views\\userProfile.vue"],"names":[],"mappings":";;;AAsBA,SAAS,GAAT,QAAoB,KAApB;AACA,OAAO,UAAP,MAAuB,0BAAvB;AACA,SAAS,oBAAT,QAAqC,mBAArC;AAEA,eAAe;EACb,KADa,mBACL;IACN,kBAAuC,UAAU,EAAjD;IAAA,IAAQ,QAAR,eAAQ,QAAR;IAAA,IAAkB,GAAlB,eAAkB,GAAlB;IAAA,IAAuB,WAAvB,eAAuB,WAAvB;;IAEA,IAAM,IAAG,GAAI,GAAG,CAAC,IAAD,CAAhB;IACA,IAAM,SAAQ,GAAI,GAAG,CAAC,IAAD,CAArB;IACA,IAAM,KAAI,GAAI,CAAC,WAAD,EAAc,YAAd,EAA4B,WAA5B,CAAd,CALM,CAON;;IACA,IAAM,YAAW;MAAA,mEAAI;QAAA;QAAA;UAAA;YAAA;cAAA;gBACnB,IAAI,IAAI,CAAC,KAAT,EAAgB;kBACd;kBACA;kBACA;kBAEM,UALQ,GAKK,GAAG,CAAC,UAAD,EAAa,QAAb,CALR;kBAMR,UANQ,GAMK,oBAAoB,CAAC,UAAD,EAAa,IAAb,CANzB;kBAQd,UAAU,CAAC,EAAX,CACE,eADF,EAEE,UAAC,QAAD,EAAc;oBACZ;oBACA,IAAM,QAAO,GACV,QAAQ,CAAC,gBAAT,GAA4B,QAAQ,CAAC,UAAtC,GAAoD,GADtD;oBAEA,OAAO,CAAC,GAAR,CAAY,eAAe,QAAf,GAA0B,QAAtC;;oBACA,QAAQ,QAAQ,CAAC,KAAjB;sBACE,KAAK,QAAL;wBACE,OAAO,CAAC,GAAR,CAAY,kBAAZ;wBACA;;sBACF,KAAK,SAAL;wBACE,OAAO,CAAC,GAAR,CAAY,mBAAZ;wBACA;oBANJ;kBAQD,CAfH,EAgBE,UAAC,KAAD,EAAW;oBACT;oBACA;oBACA,QAAQ,KAAK,CAAC,IAAd;sBACE,KAAK,sBAAL;wBACE;wBACA;;sBACF,KAAK,kBAAL;wBACE;wBACA;sBAEF;;sBAEA,KAAK,iBAAL;wBACE;wBACA;oBAZJ;kBAcD,CAjCH,EAkCE,YAAM;oBACJ;oBACA,cAAc,CAAC,UAAU,CAAC,QAAX,CAAoB,GAArB,CAAd,CAAwC,IAAxC,CAA6C,UAAC,WAAD,EAAiB;sBAC5D,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,WAAjC;oBACD,CAFD;kBAGF,CAvCF;gBAyCF;;cAlDmB;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAJ;;MAAA,gBAAX,YAAW;QAAA;MAAA;IAAA,GAAjB,CARM,CA6DN;;;IACA,IAAM,YAAW,GAAI,SAAf,YAAe,CAAC,CAAD,EAAO;MAC1B,IAAI,QAAO,GAAI,CAAC,CAAC,MAAF,CAAS,KAAT,CAAe,CAAf,CAAf;MACA,OAAO,CAAC,GAAR,CAAY,QAAZ;;MAEA,IAAI,QAAO,IAAK,KAAK,CAAC,QAAN,CAAe,QAAQ,CAAC,IAAxB,CAAhB,EAA+C;QAC7C,IAAI,CAAC,KAAL,GAAa,QAAb;QACA,SAAS,CAAC,KAAV,GAAkB,IAAlB;MACF,CAHA,MAGO;QACL,IAAI,CAAC,KAAL,GAAa,IAAb;QACA,SAAS,CAAC,KAAV,GAAkB,0CAAlB;MACF;IACD,CAXD;;IAaA,OAAO;MAAE,YAAY,EAAZ,YAAF;MAAgB,YAAY,EAAZ,YAAhB;MAA8B,SAAQ,EAAR;IAA9B,CAAP;EACD;AA7EY,CAAf","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <form @submit.prevent=\"handleSubmit\">\r\n          <input type=\"file\" @change=\"handleChange\" />\r\n          {{ fileError }}\r\n          <button>submit</button>\r\n        </form>\r\n      </div>\r\n      <div class=\"col\">col 2</div>\r\n      <div class=\"col\">col 3</div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col\">col 1</div>\r\n      <div class=\"col\">col 2</div>\r\n      <div class=\"col\">col 3</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\nimport useStorage from \"@/composables/useStorage\";\r\nimport { uploadBytesResumable } from \"@firebase/storage\";\r\n\r\nexport default {\r\n  setup() {\r\n    const { filePath, url, uploadImage } = useStorage();\r\n\r\n    const file = ref(null);\r\n    const fileError = ref(null);\r\n    const types = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\r\n\r\n    //submit image\r\n    const handleSubmit = async () => {\r\n      if (file.value) {\r\n        //console.log(\"submitted \" + file.value)\r\n        //uploadImage(file.value)\r\n        //console.log('image uploaded url:' + url.value)\r\n\r\n        const storageRef = ref(useStorage, \"images\");\r\n        const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            const progress =\r\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log(\"Upload is \" + progress + \"% done\");\r\n            switch (snapshot.state) {\r\n              case \"paused\":\r\n                console.log(\"Upload is paused\");\r\n                break;\r\n              case \"running\":\r\n                console.log(\"Upload is running\");\r\n                break;\r\n            }\r\n          },\r\n          (error) => {\r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n              case \"storage/unauthorized\":\r\n                // User doesn't have permission to access the object\r\n                break;\r\n              case \"storage/canceled\":\r\n                // User canceled the upload\r\n                break;\r\n\r\n              // ...\r\n\r\n              case \"storage/unknown\":\r\n                // Unknown error occurred, inspect error.serverResponse\r\n                break;\r\n            }\r\n          },\r\n          () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n              console.log(\"File available at\", downloadURL);\r\n            });\r\n          }\r\n        );\r\n      }\r\n    };\r\n\r\n    //handle image name\r\n    const handleChange = (e) => {\r\n      let selected = e.target.files[0];\r\n      console.log(selected);\r\n\r\n      if (selected && types.includes(selected.type)) {\r\n        file.value = selected;\r\n        fileError.value = null;\r\n      } else {\r\n        file.value = null;\r\n        fileError.value = \"Please select an image file (png or jpg)\";\r\n      }\r\n    };\r\n\r\n    return { handleChange, handleSubmit, fileError };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}